/* Sample Command */
// Set LCD
//	publish("tmaso", "/tma/lcd", "set;lcdUid;line1:Hello#line2:XXX")


var Boolean enableSecurity = false
var Boolean authenticatedRFID = false
var Boolean enableXMPP = false 
var String xmppTo = "thientran1986@xmpp.zone"

// Light Rules ----------------------------------------------------------------------------------------------
/*
rule "Garage Light Rule"
	when
		Item Garage_Light changed
	then
		if(Garage_Light.state == ON) {
    		sendCommand(Garage_LightSwitch, ON);
		} else if(Garage_Light.state == OFF) {
			sendCommand(Garage_LightSwitch, OFF);
		}
end
rule "Garage Light Switch Rule"
	when
		Item Garage_LightSwitch changed
	then
		if(Garage_LightSwitch.state == ON) {
    		sendCommand(Garage_Light, ON);
		} else if(Garage_LightSwitch.state == OFF) {
			sendCommand(Garage_Light, OFF);
		}
end
rule "Living Room Light Rule"
	when
		Item Living_Light changed
	then
		if(Living_Light.state == ON) {
    		sendCommand(Living_LightSwitch, ON);
		} else if(Living_Light.state == OFF) {
			sendCommand(Living_LightSwitch, OFF);
		}
end
rule "Living Room Light Switch Rule"
	when
		Item Living_LightSwitch changed
	then
		if(Living_LightSwitch.state == ON) {
    		sendCommand(Living_Light, ON);
		} else if(Living_LightSwitch.state == OFF) {
			sendCommand(Living_Light, OFF);
		}
end
rule "Bedroom Light Rule"
	when
		Item Bed_Light changed
	then
		if(Bed_Light.state == ON) {
    		sendCommand(Bed_LightSwitch, ON);
		} else if(Bed_Light.state == OFF) {
			sendCommand(Bed_LightSwitch, OFF);
		}
end
rule "Bedroom Light Switch Rule"
	when
		Item Bed_LightSwitch changed
	then
		if(Bed_LightSwitch.state == ON) {
    		sendCommand(Bed_Light, ON);
		} else if(Bed_LightSwitch.state == OFF) {
			sendCommand(Bed_Light, OFF);
		}
end
 */
// End Light Rules ------------------------------------------------------------------------------------------

// Garage Rules ----------------------------------------------------------------------------------------------
rule "Car Status"
	when
		Item Garage_CarStatus changed
	then
		if(Garage_CarStatus.state == ON) {
    		postUpdate(Garage_CarStatus_label, "Your Car Still There");
		} else if(Garage_CarStatus.state == OFF) {
			postUpdate(Garage_CarStatus_label, "Your Car Went Away");
			// ALARM: Notify to mobile phone
			if(enableXMPP) {
				sendXMPP(xmppTo, "WARN! Your Car Went Away");
			}
			// Bell 
			sendCommand(Garage_Bell, ON);
		}
end

rule "Gas Status"
	when
		Item Garage_GasStatus changed
	then
		if(Garage_GasStatus.state == ON) {
			publish("tmaso", "/tma/lcd", "set;lcdUid;line1:DANGER in Garage#line2:Gas detected")
    		postUpdate(Garage_GasStatus_label, "DANGER! Gas detected.");
    		// ALARM: Bell 
			sendCommand(Garage_Bell, ON);
			if(enableXMPP) {
    			sendXMPP(xmppTo, "DANGER in Garage#! Gas detected");
			}
		} else if(Garage_GasStatus.state == OFF) {
			// ALARM: Bell
			publish("tmaso", "/tma/lcd", "set;lcdUid;line1:Garage is safe") 
			sendCommand(Garage_Bell, OFF);
			postUpdate(Garage_GasStatus_label, "SAFE! Gas undetected");
			if(enableXMPP) {
    			sendXMPP(xmppTo, "Gas undetected! SAFE");
			}
		}
end

rule "Env_LightStatus Status"
	when
		Item Env_LightStatus changed
	then
		if(Env_LightStatus.state == ON) {
			sendCommand(Garage_Light, OFF);
			sendCommand(Living_Light, OFF);
			sendCommand(Bed_Light, OFF);
		}
end
// End Garage Rules ------------------------------------------------------------------------------------------



// Front Door Rules ------------------------------------------------------------------------------------------
rule "Front Door Status"
	when
		Item Living_DoorContact received command
	then
		if(Living_DoorContact.state == ON) {
    		postUpdate(Living_DoorContact_label, "OPEN");
    		if(!authenticatedRFID){
    			publish("tmaso", "/tma/lcd", "set;lcdUid;line1:BEEP BEEP#line2:Who Are You?")
    			// If don't authenticated & access to front door
    			postUpdate(Lcd_Display, "Invalid Access from Front Door");
    			// ALARM: Not authenticated but open the door
    			// Bell 
				sendCommand(Garage_Bell, ON);
				if(enableXMPP) {
	    			sendXMPP(xmppTo, "DANGER! Theft is visiting your home from front door!");
				}
    		}
		} else if(Living_DoorContact.state == OFF) {
			postUpdate(Living_DoorContact_label, "CLOSED");
			authenticatedRFID = false;
		}
end

rule "Door RFID"
	when
		Item Living_DoorRFID received command
	then
		if(Living_DoorRFID.state == ON) {
			sendCommand(Garage_Bell, OFF);
			// send MQTT to update LCD
			publish("tmaso", "/tma/lcd", "set;lcdUid;line1:Welcome home#line2:    master!")
			sendCommand(Lcd_Display, "RFID - Valid Access");
			authenticatedRFID = true;
			sendCommand(Garage_Bell, OFF);
		}
		/* else if(Living_DoorRFID.state == OFF) {
			// send MQTT to update LCD
			publish("tmaso", "/tma/lcd", "set;lcdUid;line1:BEEP BEEP#line2:Who Are You?")
			sendCommand(Lcd_Display, "RFID - Invalid Access");
			authenticatedRFID = false;
		} */
end
// End Front Door Rules --------------------------------------------------------------------------------------



// Security Rules ----------------------------------------------------------------------------------------------
rule "Enable Security Rule"
	when
		Item Living_Security changed
	then
		if(Living_Security.state == ON) {
			publish("tmaso", "/tma/lcd", "set;lcdUid;line1:Your Security#line2:    Enabled")
			postUpdate(Lcd_Display, "Security Enabled");
			enableSecurity = true;
		} else if(Living_Security.state == OFF) {
			publish("tmaso", "/tma/lcd", "set;lcdUid;line1:Your Security#line2:    Disabled")
			postUpdate(Lcd_Display, "Security Disabled");
			enableSecurity = false;
			// Stop buzzer
			sendCommand(Garage_Bell, OFF);
		}
end
rule "PIR Sensor detects moving"
	when
		Item Living_PIRSensor changed or Item Bed_PIRSensor changed 
	then
		if(enableSecurity){
			// Don't enable security => update light
			if (Bed_PIRSensor.state == ON) {
				publish("tmaso", "/tma/lcd", "set;lcdUid;line1:Someone in#line2:  your bedroom")
				sendCommand(Garage_Bell, ON);
				if(enableXMPP) {
					sendXMPP(xmppTo, "DANGER! Someone in your bed room!");
				}
			
			} 
			if (Living_PIRSensor.state == ON) {
				publish("tmaso", "/tma/lcd", "set;lcdUid;line1:Someone in#line2:your living room")
				sendCommand(Garage_Bell, ON);
				if(enableXMPP) {
					sendXMPP(xmppTo, "DANGER! Someone in your living room!");
				}
				
			}
			
		} else {
			// Don't enable security => update light
			if(Env_LightStatus.state == OFF){
				if (Bed_PIRSensor.state == ON) {
					sendCommand(Bed_Light, ON);
				} 
				if (Living_PIRSensor.state == ON) {
					sendCommand(Living_Light, ON);
				} 
			}
		}
end
// End define Security Rules -----------------------------------------------------------------------------------



// Garden Rules ------------------------------------------------------------------------------------------------
rule "Soil moisture got low"
	when
		Item Env_Moisture_Humidity changed
	then
		if(Env_Moisture_Humidity.state == ON) {
			postUpdate(Env_Moisture_Humidity_label, "Needs Water");
    		postUpdate(Lcd_Display, "Your garden needed water");
    		if(enableXMPP) {
    			sendXMPP(xmppTo, "WARN! Your garden needs water");
    		}
		} else if(Env_Moisture_Humidity.state == OFF) {
			postUpdate(Env_Moisture_Humidity_label, "Enough Water");
			postUpdate(Lcd_Display, "Your garden got enough water");
			if(enableXMPP) {
				sendXMPP(xmppTo, "Your garden got full water");
			}
		}
end
// End Garden Rules --------------------------------------------------------------------------------------------